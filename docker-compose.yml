services:
  redis:
    command: redis-server --save 60 10 --maxmemory 256mb --maxmemory-policy allkeys-lru
    image: redis:latest
    container_name: woopdi_redis
    ports:
      - "6379:6379"
    volumes:
      - woopdi_redis_data:/data
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
  api:
    build: .
    container_name: woopdi_fastapi_app
    restart: always
    depends_on:
      db:
        condition: service_healthy  # Wait for db to be healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      - REDIS_HOST=redis
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_PORT=6379
      - PYTHONPATH=/app
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - API_HOST=${API_HOST}
      - GCP_SERVICE_ACCOUNT_KEY={GCP_SERVICE_FILE_CRED_JSON_LOCATION}
      - GCP_BUCKET_NAME=${GCP_BUCKET_NAME}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - JWT_SECRET=${JWT_SECRET}
      - REPLICATE_API_TOKEN=${REPLICATE_API_TOKEN}
    ports:
      - "${API_HOST}:8000:8000"  # Use the API_HOST in port binding
    volumes:
      - ./:/app
    networks:
      - ai_network
    command: ["./start.sh"]  # Use the startup script instead of direct uvicorn command
  celery_workers:
    build:
      context: .
      dockerfile: Dockerfile.celery  
    command: watchmedo auto-restart --directory=/app/celery_app --pattern="*.py" --recursive -- celery -A celery_app.celery_app worker --loglevel=info -c 4
    # command: "tail -f /dev/null"
    volumes:
      - .:/app
    working_dir: /app  
    depends_on:
      redis:
        condition: service_healthy  # Wait for Redis to be ready
      db:
        condition: service_healthy  # Also wait for database to be ready
    environment:
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - GCP_SERVICE_ACCOUNT_KEY=/app/general-purpose-jobs-0216f73edded.json
      - GCP_BUCKET_NAME=${GCP_BUCKET_NAME}
      - WEB_CLIENT_URL=${WEB_CLIENT_URL}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - REPLICATE_API_TOKEN=${REPLICATE_API_TOKEN}

    networks:
      - ai_network

  db:
    image: postgres:13
    container_name: woopdi_postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - woopdi_postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
  test_db:  # Separate PostgreSQL instance for tests
    image: postgres:13
    container_name: woopdi_postgres_test_db
    restart: always
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
    networks:
      - ai_network
    ports:
      - "5433:5432"  # Use a different port for the test database
    volumes:
      - woopdi_postgres_test_data:/var/lib/postgresql/data

volumes:
  woopdi_postgres_data:
  woopdi_postgres_test_data:
  woopdi_redis_data:

networks:
  ai_network:
    driver: bridge
